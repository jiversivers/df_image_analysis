name: Update Requirements & Publish Release

on:
  push:
    branches:
      - main
    tags:
      - '*'
  release:
    types:
      - 'published'
      - 'prereleased'

jobs:
  update-requirements:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install pipreqs toml

      - name: Generate requirements.txt
        run: |
          pipreqs ./src --force
          mv ./src/requirements.txt ./

      - name: Update pyproject.toml
        run: python .github/scripts/fill_toml_reqs.py

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          git add requirements.txt pyproject.toml
          git commit -m "Auto-update requirements.txt and pyproject.toml" || exit 0
          git push origin main --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-prerelease:
    if: startsWith(github.ref, 'refs/tags/')
    needs: update-requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish release
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"Release $TAG_NAME\",\"draft\":false,\"prerelease\":true}" \
            https://api.github.com/repos/${{ github.repository }}/releases

  build-and-publish:
    needs: update-requirements
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Update Version
        run: python .github/scripts/set_version.py

      - name: Install build tools
        run: pip install build twine

      - name: Build the package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GH_PYPI }}
        run: twine upload dist/*
